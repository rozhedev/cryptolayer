// Объекты содержащие в себе сообщения ошибок, мин. значения и т.д.

const depositErrors = {
    bitcoin: 'The minimal amount for Bitcoin is 0.0006 BTC',
    ethereum: 'The minimal amount for Ethereum is 0.008 ETH',
    litecoin: 'The minimal amount is 0.165 LTC',
    dash: 'The minimal amount is 0.125 DASH',
    usd: 'The minimal amount for dollar USA is 30 USD',
    emptyInput: "The investment amount can't be blank",
};

const depositValues = {
    bitcoin: 0.0006,
    ethereum: 0.008,
    litecoin: 0.165,
    dash: 0.125,
    usd: 30,
};

const depositValuesText = {
    bitcoin: `<span>* </span>min 0.0006 BTC`,
    ethereum: `<span>* </span>min 0.008 ETH`,
    litecoin: `<span>* </span>min 0.165 LTC`,
    dash: `<span>* </span>min 0.125 DASH`,
    usd: `<span>* </span>min 30 USD`,
};

const withdrawErrors = {
    bitcoin: 'The minimal amount for Bitcoin is 0.0002 BTC',
    ethereum: 'The minimal amount for Ethereum is 0.0025 ETH',
    litecoin: 'The minimal amount is 0.054 LTC',
    dash: 'The minimal amount is 0.04 DASH',
    usd: 'The minimal amount for dollar USA is 5 USD',
    emptyInput: "The investment amount can't be blank",
};

const withdrawValues = {
    bitcoin: 0.0002,
    ethereum: 0.0025,
    litecoin: 0.054,
    dash: 0.04,
    usd: 5,
};

const withdrawValuesText = {
    bitcoin: `<span>* </span>min 0.0002 BTC`,
    ethereum: `<span>* </span>min 0.0025 ETH`,
    litecoin: `<span>* </span>min 0.054 LTC`,
    dash: `<span>* </span>min 0.04 DASH`,
    usd: `<span>* </span>min 5 USD`,
};

const btnsClassList = {
    bitcoin: 'calc__step-currency--orange',
    ethereum: 'calc__step-currency--violet',
    litecoin: 'calc__step-currency--blue',
    dash: 'calc__step-currency--green',
    usd: 'calc__step-currency--bgcolor',
};

const priceFor1MH = {
    ethereum: 0.328,
    litecoin: 0.127,
    other: 1.707,
};
// Выбор нужной валюты

function chooseCurrency(item, currencyBtns) {
    for (let item of currencyBtns) {
        item.classList.remove('_active');
    }
    item.classList.add('_active');
}

//  Проверка лимитов

function checkLimits(curBtn, curBtns, minValue, text1, text2, text3, text4, text5) {
    for (curBtn of curBtns) {
        if (curBtn.classList.contains('_active')) {
            if (curBtn.classList.contains(btnsClassList.bitcoin)) {
                minValue.innerHTML = text1;
            }
            if (curBtn.classList.contains(btnsClassList.ethereum)) {
                minValue.innerHTML = text2;
            }
            if (curBtn.classList.contains(btnsClassList.litecoin)) {
                minValue.innerHTML = text3;
            }
            if (curBtn.classList.contains(btnsClassList.dash)) {
                minValue.innerHTML = text4;
            }
            if (curBtn.classList.contains(btnsClassList.usd)) {
                minValue.innerHTML = text5;
            }
        }
    }
}

// Выбор нужного тарифа

function priceFor1(currencyBtns, outputBlock, text1, text2, text3) {
    for (let i = 0; i < currencyBtns.length; i++) {
        
        if ((i == 0 || i == 3) && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text1;

        } else if (i == 1 && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text2;

        } else if ((i == 2 || i == 4) && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text3;
        }
    }
}

// Функции для валидации форм пополнения/вывода

function setErrorFor(input, message) {
    const formControl = input.parentElement;
    const small = formControl.querySelector('small');

    formControl.classList.remove('success');
    formControl.classList.add('error');
    small.innerText = message;
}

function setSuccessFor(input) {
    const formControl = input.parentElement;

    formControl.classList.remove('error');
    formControl.classList.add('success');
}

// Проверка мин. суммы для пополнения/вывода

function checkAmount(curBtns, amount, value1, value2, value3, value4, value5, text1, text2, text3, text4, text5, text6) {
    for (let curBtn of curBtns) {

        if (amount.value == '') {
            setErrorFor(amount, text6);
            break;

        } else if (curBtn.classList.contains(btnsClassList.bitcoin) && curBtn.classList.contains('_active') && +amount.value < value1) {
            setErrorFor(amount, text1);
            break;

        } else if (curBtn.classList.contains(btnsClassList.ethereum) && curBtn.classList.contains('_active') && +amount.value < value2) {
            setErrorFor(amount, text2);
            break;

        } else if (curBtn.classList.contains(btnsClassList.litecoin) && curBtn.classList.contains('_active') && +amount.value < value3) {
            setErrorFor(amount, text3);
            break;

        } else if (curBtn.classList.contains(btnsClassList.dash) && curBtn.classList.contains('_active') && +amount.value < value4) {
            setErrorFor(amount, text4);
            break;

        } else if (curBtn.classList.contains(btnsClassList.usd) && curBtn.classList.contains('_active') && +amount.value < value5) {
            setErrorFor(amount, text5);
            break;

        } else {
            setSuccessFor(amount);
        }
    }
}

// Проверка на правильное заполнение полей. Если все правильно - перенаправляем на страницу

// function setLink(btn, inputs, hrefValue) {
//     btn.addEventListener('click', () => {
//         for (let i = 0; i < inputs.length; i++) {
//             if (inputs[i].classList.contains('success')) {
//                 btn.setAttribute('href', hrefValue);
//             } else {
//                 btn.setAttribute('href', '#');
//             }
//         }
//     });
// }

const curDepositBtns = document.querySelectorAll('.deposit__step-currency'),
    investAmount = document.querySelector('#invest-amount'),
    investPeriod = document.querySelector('#invest-period'),
    depositLimit = document.querySelector('#deposit-limit'),
    depositBtn = document.querySelector('.deposit__btn'),
    depositInputs = document.querySelectorAll('.deposit__step-content');

const idOutput = document.querySelector('#id-output'),
    curOutput = document.querySelector('#cur-output'),
    amountOutput = document.querySelector('#amount-output'),
    daysOutput = document.querySelector('#days-output'),
    depositValue = document.querySelector('#deposit-value'),
    walletValue = document.querySelector('#wallet-value');

let invoiceId, invAmount, paymentMethod, miningPeriod, cryptoWallet;


if (curDepositBtns) {
    curDepositBtns.forEach((curDepositBtn) => {

        curDepositBtn.addEventListener('click', () => {
            chooseCurrency(curDepositBtn, curDepositBtns);

            checkLimits(curDepositBtn, curDepositBtns, depositLimit, depositValuesText.bitcoin, depositValuesText.ethereum, depositValuesText.litecoin, depositValuesText.dash, depositValuesText.usd);

            setInterval(checkAmount(curDepositBtns, investAmount, depositValues.bitcoin, depositValues.ethereum, depositValues.litecoin, depositValues.dash, depositValues.usd, depositErrors.bitcoin, depositErrors.ethereum, depositErrors.litecoin, depositErrors.dash, depositErrors.usd, depositErrors.emptyInput), 2000);
        });
    });
}

function checkPeriod() {
    if (investPeriod.value == '') {
        setErrorFor(investPeriod, "Invest period can't be blank");
    } else if (+investPeriod.value < 30) {
        setErrorFor(investPeriod, "The minimum investment period is 30 days");
    } else if (+investPeriod.value > 365) {
        setErrorFor(investPeriod, "The maximum investment period is 365 days");
    } else {
        setSuccessFor(investPeriod);
    }
}

if (investAmount) {
    investAmount.addEventListener('input', () => {
        setInterval(checkAmount(curDepositBtns, investAmount, depositValues.bitcoin, depositValues.ethereum, depositValues.litecoin, depositValues.dash, depositValues.usd, depositErrors.bitcoin, depositErrors.ethereum, depositErrors.litecoin, depositErrors.dash, depositErrors.usd, depositErrors.emptyInput), 2000);
    });
}

if (investPeriod) {
    investPeriod.addEventListener('input', () => {
        setInterval(checkPeriod, 1000);
    })
}

function setLink(btn, inputs, curBtns) {
    if (btn) {
        btn.addEventListener('click', () => {
            for (let i = 0; i < inputs.length; i++) {
                if (inputs[i].classList.contains('success')) {

                    invoiceId = '#' + Math.floor((Math.random() * 10000));
                    invAmount = (+investAmount.value).toFixed(8);
                    miningPeriod = investPeriod.value;

                    for (let i = 0; i < curBtns.length; i++) {
                        if (curBtns[i].classList.contains(btnsClassList.bitcoin) && curBtns[i].classList.contains('_active')) {
                            paymentMethod = 'Bitcoin';
                            cryptoWallet = '    ';
                            console.log('Success');
                            break;
                        }
                        if (curBtns[i].classList.contains(btnsClassList.ethereum) && curBtns[i].classList.contains('_active')) {
                            paymentMethod = 'Ethereum';
                            cryptoWallet = '0x759F8dc635e0a7c418aF226C5eE89F01A2bB2eE0';
                            break;
                        }
                        if (curBtns[i].classList.contains(btnsClassList.litecoin) && curBtns[i].classList.contains('_active')) {
                            paymentMethod = 'Litecoin';
                            cryptoWallet = 'ltc1qgk4lc4nhl34l3kfxdpl3anj8tcr0fp0e5vgwum';
                            break;
                        }
                        if (curBtns[i].classList.contains(btnsClassList.dash) && curBtns[i].classList.contains('_active')) {
                            paymentMethod = 'Dash';
                            cryptoWallet = 'XrrhXn28dKn2CnjDuqLgNzgLQTXi1MfaRi';
                            break;
                        }
                    }

                    btn.setAttribute('href', 'payment-crypto.html');

                    setCreditails();
                } else {
                    btn.setAttribute('href', '');  // Или переадрессация на платегу
                }
            }
        });
    }
}

setLink(depositBtn, depositInputs, curDepositBtns);

function setCreditails() {
    if (idOutput && curOutput && amountOutput && daysOutput && depositValue && walletValue) {
        idOutput.innerHTML = invoiceId;
        curOutput.innerHTML = paymentMethod;
        amountOutput.innerHTML = invAmount;
        daysOutput.innerHTML = miningPeriod;
        depositValue.value = invAmount;
        walletValue.value = cryptoWallet;
    }
}

// function setLink(btn, inputs) {
//     btn.addEventListener('click', () => {
//         for (let i = 0; i < inputs.length; i++) {
//             if (inputs[i].classList.contains('success')) {

//                 for (let i = 0; i < curDepositBtns.length; i++) {
//                     if (curDepositBtns[i].classList.contains(btnsClassList.bitcoin) && curDepositBtns[i].classList.contains('_active')) {
//                         btn.setAttribute('href', 'payment-btc.html');
//                         break;
//                     }
//                     if (curDepositBtns[i].classList.contains(btnsClassList.ethereum) && curDepositBtns[i].classList.contains('_active')) {
//                         btn.setAttribute('href', 'payment-eth.html');
//                         break;
//                     }
//                     if (curDepositBtns[i].classList.contains(btnsClassList.litecoin) && curDepositBtns[i].classList.contains('_active')) {
//                         btn.setAttribute('href', 'payment-ltc.html');
//                         break;
//                     }
//                     if (curDepositBtns[i].classList.contains(btnsClassList.dash) && curDepositBtns[i].classList.contains('_active')) {
//                         btn.setAttribute('href', 'payment-dash.html');
//                         break;
//                     }
//                 }
//             } else {
//                 btn.setAttribute('href', '#'); // Или переадрессация на платегу
//             }
//         }
//     });
// }

//     if (curDepositBtns[i].classList.contains(btnsClassList.bitcoin) && curDepositBtns[i].classList.contains('_active')) {
//         curOutput.textContent = 'Bitcoin';

//         amountOutput = +investAmount.value * +curDepositBtns[i].classList.contains(btnsClassList.bitcoin).getAttribute('data-currency').value;
//         daysOutput.textContent = investPeriod.value;

//         depositValue.value = investAmount.value;

//         walletValue.value = cryptoWallets.bitcoin;
//     }
//     if (curDepositBtns[i].classList.contains(btnsClassList.ethereum) && curDepositBtns[i].classList.contains('_active')) {
//         curOutput.textContent = 'Ethereum';

//         amountOutput.textContent = +investAmount.value * +curDepositBtns[i].classList.contains(btnsClassList.bitcoin).getAttribute('data-currency').value;

//         daysOutput.textContent = investPeriod.value;

//         depositValue.value = investAmount.value;

//         walletValue.value = cryptoWallets.ethereum;
//     }
//     if (curDepositBtns[i].classList.contains(btnsClassList.litecoin) && curDepositBtns[i].classList.contains('_active')) {
//         curOutput.textContent = 'Litecoin';
//         amountOutput.textContent = +investAmount.value * +curDepositBtns[i].classList.contains(btnsClassList.bitcoin).getAttribute('data-currency').value;

//         daysOutput.textContent = investPeriod.value;

//         depositValue.value = investAmount.value;

//         walletValue.value = cryptoWallets.litecoin;
//     }
//     if (curDepositBtns[i].classList.contains(btnsClassList.dash) && curDepositBtns[i].classList.contains('_active')) {
//         curOutput.textContent = 'Dash';

//         amountOutput.textContent = +investAmount.value * +curDepositBtns[i].classList.contains(btnsClassList.bitcoin).getAttribute('data-currency').value;

//         daysOutput.textContent = investPeriod.value;

//         depositValue.value = investAmount.value;

//         walletValue.value = cryptoWallets.dash;
//     }
// }

// for (let i = 0; i < curDepositBtns.length; i++) {

//     if ((curDepositBtns[i].classList.contains(btnsClassList.bitcoin) || curDepositBtns[i].classList.contains(btnsClassList.ethereum) || curDepositBtns[i].classList.contains(btnsClassList.litecoin) || curDepositBtns[i].classList.contains(btnsClassList.dash)) && curDepositBtns[i].classList.contains('_active')) {

//         btn.setAttribute('href', 'payment-crypto.html');


//     }
// }