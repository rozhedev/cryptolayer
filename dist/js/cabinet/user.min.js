'use strict'

// Определение устройства

const isMobile = {
    Android: function () {
        return navigator.userAgent.match(/Android/i);
    },
    iOS: function () {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function () {
        return navigator.userAgent.match(/Opera Mini/i);
    },
    any: function () {
        return (
            isMobile.Android() ||
            isMobile.iOS() ||
            isMobile.Opera()
        );
    }
}

//  Проверка на моб. устройство

if (isMobile.any()) {
    document.body.classList.add('_touch');
} else {
    document.body.classList.add('_pc');
}

// Бургер меню

function toggleClassMenu(menuIcon, menuBody) {
    if (menuIcon) {
        menuIcon.addEventListener('click', function () {
            document.body.classList.toggle('_lock');
            menuIcon.classList.toggle('_active');
            menuBody.classList.toggle('_active');
        });
    }
}
// Выбор нужной валюты

function chooseCurrency(item, currencyBtns) {
    for (let item of currencyBtns) {
        item.classList.remove('_active');
    }
    item.classList.add('_active');
}

//  Проверка лимитов

function checkLimits(curBtn, curBtns, minValue, text1, text2, text3, text4, text5) {
    for (curBtn of curBtns) {
        if (curBtn.classList.contains('_active')) {
            if (curBtn.classList.contains(btnsClassList.bitcoin)) {
                minValue.innerHTML = text1;
            }
            if (curBtn.classList.contains(btnsClassList.ethereum)) {
                minValue.innerHTML = text2;
            }
            if (curBtn.classList.contains(btnsClassList.litecoin)) {
                minValue.innerHTML = text3;
            }
            if (curBtn.classList.contains(btnsClassList.dash)) {
                minValue.innerHTML = text4;
            }
            if (curBtn.classList.contains(btnsClassList.usd)) {
                minValue.innerHTML = text5;
            }
        }
    }
}

// Выбор нужного тарифа

function priceFor1(currencyBtns, outputBlock, text1, text2, text3) {
    for (let i = 0; i < currencyBtns.length; i++) {
        
        if ((i == 0 || i == 3) && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text1;

        } else if (i == 1 && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text2;

        } else if ((i == 2 || i == 4) && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text3;
        }
    }
}

// Функции для валидации форм пополнения/вывода

function setErrorFor(input, message) {
    const formControl = input.parentElement;
    const small = formControl.querySelector('small');

    formControl.classList.remove('success');
    formControl.classList.add('error');
    small.innerText = message;
}

function setSuccessFor(input) {
    const formControl = input.parentElement;

    formControl.classList.remove('error');
    formControl.classList.add('success');
}

// Проверка мин. суммы для пополнения/вывода

function checkAmount(curBtns, amount, value1, value2, value3, value4, value5, text1, text2, text3, text4, text5, text6) {
    for (let curBtn of curBtns) {

        if (amount.value == '') {
            setErrorFor(amount, text6);
            break;

        } else if (curBtn.classList.contains(btnsClassList.bitcoin) && curBtn.classList.contains('_active') && +amount.value < value1) {
            setErrorFor(amount, text1);
            break;

        } else if (curBtn.classList.contains(btnsClassList.ethereum) && curBtn.classList.contains('_active') && +amount.value < value2) {
            setErrorFor(amount, text2);
            break;

        } else if (curBtn.classList.contains(btnsClassList.litecoin) && curBtn.classList.contains('_active') && +amount.value < value3) {
            setErrorFor(amount, text3);
            break;

        } else if (curBtn.classList.contains(btnsClassList.dash) && curBtn.classList.contains('_active') && +amount.value < value4) {
            setErrorFor(amount, text4);
            break;

        } else if (curBtn.classList.contains(btnsClassList.usd) && curBtn.classList.contains('_active') && +amount.value < value5) {
            setErrorFor(amount, text5);
            break;

        } else {
            setSuccessFor(amount);
        }
    }
}

// Проверка на правильное заполнение полей. Если все правильно - перенаправляем на страницу

// function setLink(btn, inputs, hrefValue) {
//     btn.addEventListener('click', () => {
//         for (let i = 0; i < inputs.length; i++) {
//             if (inputs[i].classList.contains('success')) {
//                 btn.setAttribute('href', hrefValue);
//             } else {
//                 btn.setAttribute('href', '#');
//             }
//         }
//     });
// }

window.addEventListener('DOMContentLoaded', function () {

    const userMenuIcon = document.querySelector('.header-cab__menu-icon'),
        userMenuBody = document.querySelector('.header-cab__menu-body'),
        headerCabTime = document.querySelector('.header-cab__time');

    toggleClassMenu(userMenuIcon, userMenuBody);

    // Время на сайте

    function zeroInDate(value) {
        if (value < 10) {
            value = '0' + value;
        }
        return value;
    }

    function getDate() {
        let currentDate = new Date(),
            currentDay = zeroInDate(currentDate.getUTCDate()),
            currentMonth = zeroInDate(currentDate.getUTCMonth() + 1),
            currentYear = zeroInDate(currentDate.getUTCFullYear()),
            currentHours = zeroInDate(currentDate.getUTCHours()),
            currentMinutes = zeroInDate(currentDate.getUTCMinutes()),
            currentSeconds = zeroInDate(currentDate.getUTCSeconds());

        return `${currentYear}-${currentMonth}-${currentDay}, ${currentHours}:${currentMinutes}:${currentSeconds}`;
    }

    setInterval(function () {
        if (headerCabTime) {
            headerCabTime.textContent = getDate();
        } 
    }, 1000);

    // Копирование реф. ссылки

    const copyBtns = document.querySelectorAll('.copy-btn'),
        refferalLink = document.querySelector('.partner-link'),
        refTooltip = document.querySelector('.dashboard__refferal-tooltip');

    function copyLink(link, tooltip) {
        link.select();
        document.execCommand('copy');
        tooltip.textContent = 'Copied!';
    }

    copyBtns.forEach((copyBtn) => {
        copyBtn.addEventListener('click', function () {
            copyLink(refferalLink, refTooltip);
        })
        copyBtn.addEventListener('onmouseout', function () {
            const refTooltips = document.querySelectorAll('.dashboard__refferal-tooltip');
            refTooltips.textContent = 'Copy to clipboard';
        })
    });

    // * Переделай функионал копирования под несколько кнопок на одной странице!

    // Модальное окно для withdraw и ост. страниц

    function toggleModal(triggerOpen, triggerClose, activeClass, modalClass) {
        document.addEventListener('click', (event) => {
            // open
            if (event.target.closest(`.${triggerOpen}`)) {
                event.preventDefault();

                const target = event.target.closest(`.${triggerOpen}`);
                const modalID = target.getAttribute('href').replace('#', '');
                const modal = document.getElementById(modalID);

                document.body.style.paddingRight = `${getScrollbarWidth()}px`;
                document.body.style.overflow = 'hidden';

                if (modal) {
                    modal.classList.add(activeClass);
                }
            }
            // close
            if (event.target.closest(`.${triggerClose}`) ||
                event.target.classList.contains(activeClass)
            ) {
                event.preventDefault();

                const modal = event.target.closest(`.${modalClass}`);

                modal.classList.remove(activeClass);

                document.body.style.overflow = 'auto';
                document.body.style.paddingRight = '0px';
            }
        })
    }

    const getScrollbarWidth = () => {
        const item = document.createElement('div');

        item.style.position = 'absolute';
        item.style.top = '-9999px';
        item.style.width = '50px';
        item.style.height = '50px';
        item.style.overflow = 'scroll';
        item.style.visibility = 'hidden';

        document.body.appendChild(item);

        // Вычисляем ширину скрола
        const scrollBarWidth = item.offsetWidth - item.clientWidth;

        document.body.removeChild(item);

        return scrollBarWidth;
    };

    toggleModal('withdraw__modal--open', 'withdraw__modal--close', 'withdraw__modal--active', 'withdraw__modal');
})