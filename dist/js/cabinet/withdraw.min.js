// Объекты содержащие в себе сообщения ошибок, мин. значения и т.д.

const depositErrors = {
    bitcoin: 'The minimal amount for Bitcoin is 0.0006 BTC',
    ethereum: 'The minimal amount for Ethereum is 0.008 ETH',
    litecoin: 'The minimal amount is 0.165 LTC',
    dash: 'The minimal amount is 0.125 DASH',
    usd: 'The minimal amount for dollar USA is 30 USD',
    emptyInput: "The investment amount can't be blank",
};

const depositValues = {
    bitcoin: 0.0006,
    ethereum: 0.008,
    litecoin: 0.165,
    dash: 0.125,
    usd: 30,
};

const depositValuesText = {
    bitcoin: `<span>* </span>min 0.0006 BTC`,
    ethereum: `<span>* </span>min 0.008 ETH`,
    litecoin: `<span>* </span>min 0.165 LTC`,
    dash: `<span>* </span>min 0.125 DASH`,
    usd: `<span>* </span>min 30 USD`,
};

const withdrawErrors = {
    bitcoin: 'The minimal amount for Bitcoin is 0.0002 BTC',
    ethereum: 'The minimal amount for Ethereum is 0.0025 ETH',
    litecoin: 'The minimal amount is 0.054 LTC',
    dash: 'The minimal amount is 0.04 DASH',
    usd: 'The minimal amount for dollar USA is 5 USD',
    emptyInput: "The investment amount can't be blank",
};

const withdrawValues = {
    bitcoin: 0.0002,
    ethereum: 0.0025,
    litecoin: 0.054,
    dash: 0.04,
    usd: 5,
};

const withdrawValuesText = {
    bitcoin: `<span>* </span>min 0.0002 BTC`,
    ethereum: `<span>* </span>min 0.0025 ETH`,
    litecoin: `<span>* </span>min 0.054 LTC`,
    dash: `<span>* </span>min 0.04 DASH`,
    usd: `<span>* </span>min 5 USD`,
};

const btnsClassList = {
    bitcoin: 'calc__step-currency--orange',
    ethereum: 'calc__step-currency--violet',
    litecoin: 'calc__step-currency--blue',
    dash: 'calc__step-currency--green',
    usd: 'calc__step-currency--bgcolor',
};

const priceFor1MH = {
    ethereum: 0.328,
    litecoin: 0.127,
    other: 1.707,
};
// Выбор нужной валюты

function chooseCurrency(item, currencyBtns) {
    for (let item of currencyBtns) {
        item.classList.remove('_active');
    }
    item.classList.add('_active');
}

//  Проверка лимитов

function checkLimits(curBtn, curBtns, minValue, text1, text2, text3, text4, text5) {
    for (curBtn of curBtns) {
        if (curBtn.classList.contains('_active')) {
            if (curBtn.classList.contains(btnsClassList.bitcoin)) {
                minValue.innerHTML = text1;
            }
            if (curBtn.classList.contains(btnsClassList.ethereum)) {
                minValue.innerHTML = text2;
            }
            if (curBtn.classList.contains(btnsClassList.litecoin)) {
                minValue.innerHTML = text3;
            }
            if (curBtn.classList.contains(btnsClassList.dash)) {
                minValue.innerHTML = text4;
            }
            if (curBtn.classList.contains(btnsClassList.usd)) {
                minValue.innerHTML = text5;
            }
        }
    }
}

// Выбор нужного тарифа

function priceFor1(currencyBtns, outputBlock, text1, text2, text3) {
    for (let i = 0; i < currencyBtns.length; i++) {
        
        if ((i == 0 || i == 3) && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text1;

        } else if (i == 1 && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text2;

        } else if ((i == 2 || i == 4) && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text3;
        }
    }
}

// Функции для валидации форм пополнения/вывода

function setErrorFor(input, message) {
    const formControl = input.parentElement;
    const small = formControl.querySelector('small');

    formControl.classList.remove('success');
    formControl.classList.add('error');
    small.innerText = message;
}

function setSuccessFor(input) {
    const formControl = input.parentElement;

    formControl.classList.remove('error');
    formControl.classList.add('success');
}

// Проверка мин. суммы для пополнения/вывода

function checkAmount(curBtns, amount, value1, value2, value3, value4, value5, text1, text2, text3, text4, text5, text6) {
    for (let curBtn of curBtns) {

        if (amount.value == '') {
            setErrorFor(amount, text6);
            break;

        } else if (curBtn.classList.contains(btnsClassList.bitcoin) && curBtn.classList.contains('_active') && +amount.value < value1) {
            setErrorFor(amount, text1);
            break;

        } else if (curBtn.classList.contains(btnsClassList.ethereum) && curBtn.classList.contains('_active') && +amount.value < value2) {
            setErrorFor(amount, text2);
            break;

        } else if (curBtn.classList.contains(btnsClassList.litecoin) && curBtn.classList.contains('_active') && +amount.value < value3) {
            setErrorFor(amount, text3);
            break;

        } else if (curBtn.classList.contains(btnsClassList.dash) && curBtn.classList.contains('_active') && +amount.value < value4) {
            setErrorFor(amount, text4);
            break;

        } else if (curBtn.classList.contains(btnsClassList.usd) && curBtn.classList.contains('_active') && +amount.value < value5) {
            setErrorFor(amount, text5);
            break;

        } else {
            setSuccessFor(amount);
        }
    }
}

// Проверка на правильное заполнение полей. Если все правильно - перенаправляем на страницу

// function setLink(btn, inputs, hrefValue) {
//     btn.addEventListener('click', () => {
//         for (let i = 0; i < inputs.length; i++) {
//             if (inputs[i].classList.contains('success')) {
//                 btn.setAttribute('href', hrefValue);
//             } else {
//                 btn.setAttribute('href', '#');
//             }
//         }
//     });
// }

const curWithdrawBtns = document.querySelectorAll('.withdraw__step-currency'),
    amountInput = document.querySelector('#withdraw-amount'),
    walletInput = document.querySelector('#withdraw-wallet'),
    withdrawLimit = document.querySelector('#withdraw-limit'),
    withdrawBtn = document.querySelector('.withdraw__btn'),
    withdrawInputs = document.querySelectorAll('.withdraw__step-content');

curWithdrawBtns.forEach((curWithdrawBtn) => {
    curWithdrawBtn.addEventListener('click', () => {
        chooseCurrency(curWithdrawBtn, curWithdrawBtns);

        checkLimits(curWithdrawBtn, curWithdrawBtns, withdrawLimit, withdrawValuesText.bitcoin, withdrawValuesText.ethereum, withdrawValuesText.litecoin, withdrawValuesText.dash, withdrawValuesText.usd);

        setInterval(checkAmount(curWithdrawBtns, amountInput, withdrawValues.bitcoin, withdrawValues.ethereum, withdrawValues.litecoin, withdrawValues.dash, withdrawValues.usd, withdrawErrors.bitcoin, withdrawErrors.ethereum, withdrawErrors.litecoin, withdrawErrors.dash, withdrawErrors.usd, withdrawErrors.emptyInput), 2000);
    });
});

amountInput.addEventListener('input', () => {

    setInterval(checkAmount(curWithdrawBtns, amountInput, withdrawValues.bitcoin, withdrawValues.ethereum, withdrawValues.litecoin, withdrawValues.dash, withdrawValues.usd, withdrawErrors.bitcoin, withdrawErrors.ethereum, withdrawErrors.litecoin, withdrawErrors.dash, withdrawErrors.usd, withdrawErrors.emptyInput), 2000);
});

walletInput.addEventListener('input', () => {
    if (walletInput.value == '') {
        setErrorFor(walletInput, "The input wallet can't be blank");
    } else if (walletInput.value.length < 7) {
        setErrorFor(walletInput, "Incorrect value. Please enter wallet correctly.");
    } else {
        console.log(walletInput.value.length);
        setSuccessFor(walletInput);
    }
})

// setLink(withdrawBtn, withdrawInputs, '#withdraw-modal');