"use strict"

// Прелоадер

window.onload = function () {
    document.body.classList.add('loaded-hiding');
    document.body.style.overflow = 'hidden';
    window.setTimeout(function () {
        document.body.classList.add('loaded');
        document.body.classList.remove('loaded-hiding');
        document.body.style.overflow = 'auto';
    }, 500);
}

// Подключение компонентов

window.addEventListener('DOMContentLoaded', function () {
    // Модалка "Используем cookie"
    setTimeout(function () {
        const cookieModal = document.querySelector('.cookie-modal'),
            cookieBtn = document.querySelector('.cookie-modal__btn');

        if (cookieModal) {
            cookieModal.classList.remove('cookie-modal--hide');
            
            cookieBtn.addEventListener('click', function () {
                cookieModal.classList.add('cookie-modal--hide');
            })
        }
    }, 4000);

    // Определение устройства

const isMobile = {
    Android: function () {
        return navigator.userAgent.match(/Android/i);
    },
    iOS: function () {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function () {
        return navigator.userAgent.match(/Opera Mini/i);
    },
    any: function () {
        return (
            isMobile.Android() ||
            isMobile.iOS() ||
            isMobile.Opera()
        );
    }
}

//  Проверка на моб. устройство

if (isMobile.any()) {
    document.body.classList.add('_touch');
} else {
    document.body.classList.add('_pc');
}

// Бургер меню

function toggleClassMenu(menuIcon, menuBody) {
    if (menuIcon) {
        menuIcon.addEventListener('click', function () {
            document.body.classList.toggle('_lock');
            menuIcon.classList.toggle('_active');
            menuBody.classList.toggle('_active');
        });
    }
}

// Бургер меню на главной

const mainMenuIcon = document.querySelector('.menu__icon'),
    mainMenuBody = document.querySelector('.menu__body');

toggleClassMenu(mainMenuIcon, mainMenuBody);

// Липкое меню

const mainHeader = document.querySelector('.header');

window.addEventListener('scroll', function () {
    if (this.pageYOffset < 160 || this.pageYOffset > 1700) {
        mainHeader.style.visibility = 'visible';
        mainHeader.style.opacity = '1';
        if (document.documentElement.clientWidth > 769) {
            mainHeader.style.height = '96px';
        } else {
            mainHeader.style.height = '80px';
        }
    }
    else {
        mainHeader.style.visibility = 'hidden';
        mainHeader.style.opacity = '0';
        mainHeader.style.height = '0px';
    }
});
    // Объекты содержащие в себе сообщения ошибок, мин. значения и т.д.

const depositErrors = {
    bitcoin: 'The minimal amount for Bitcoin is 0.0006 BTC',
    ethereum: 'The minimal amount for Ethereum is 0.008 ETH',
    litecoin: 'The minimal amount is 0.165 LTC',
    dash: 'The minimal amount is 0.125 DASH',
    usd: 'The minimal amount for dollar USA is 30 USD',
    emptyInput: "The investment amount can't be blank",
};

const depositValues = {
    bitcoin: 0.0006,
    ethereum: 0.008,
    litecoin: 0.165,
    dash: 0.125,
    usd: 30,
};

const depositValuesText = {
    bitcoin: `<span>* </span>min 0.0006 BTC`,
    ethereum: `<span>* </span>min 0.008 ETH`,
    litecoin: `<span>* </span>min 0.165 LTC`,
    dash: `<span>* </span>min 0.125 DASH`,
    usd: `<span>* </span>min 30 USD`,
};

const withdrawErrors = {
    bitcoin: 'The minimal amount for Bitcoin is 0.0002 BTC',
    ethereum: 'The minimal amount for Ethereum is 0.0025 ETH',
    litecoin: 'The minimal amount is 0.054 LTC',
    dash: 'The minimal amount is 0.04 DASH',
    usd: 'The minimal amount for dollar USA is 5 USD',
    emptyInput: "The investment amount can't be blank",
};

const withdrawValues = {
    bitcoin: 0.0002,
    ethereum: 0.0025,
    litecoin: 0.054,
    dash: 0.04,
    usd: 5,
};

const withdrawValuesText = {
    bitcoin: `<span>* </span>min 0.0002 BTC`,
    ethereum: `<span>* </span>min 0.0025 ETH`,
    litecoin: `<span>* </span>min 0.054 LTC`,
    dash: `<span>* </span>min 0.04 DASH`,
    usd: `<span>* </span>min 5 USD`,
};

const btnsClassList = {
    bitcoin: 'calc__step-currency--orange',
    ethereum: 'calc__step-currency--violet',
    litecoin: 'calc__step-currency--blue',
    dash: 'calc__step-currency--green',
    usd: 'calc__step-currency--bgcolor',
};

const priceFor1MH = {
    ethereum: 0.328,
    litecoin: 0.127,
    other: 1.707,
};
// Выбор нужной валюты

function chooseCurrency(item, currencyBtns) {
    for (let item of currencyBtns) {
        item.classList.remove('_active');
    }
    item.classList.add('_active');
}

//  Проверка лимитов

function checkLimits(curBtn, curBtns, minValue, text1, text2, text3, text4, text5) {
    for (curBtn of curBtns) {
        if (curBtn.classList.contains('_active')) {
            if (curBtn.classList.contains(btnsClassList.bitcoin)) {
                minValue.innerHTML = text1;
            }
            if (curBtn.classList.contains(btnsClassList.ethereum)) {
                minValue.innerHTML = text2;
            }
            if (curBtn.classList.contains(btnsClassList.litecoin)) {
                minValue.innerHTML = text3;
            }
            if (curBtn.classList.contains(btnsClassList.dash)) {
                minValue.innerHTML = text4;
            }
            if (curBtn.classList.contains(btnsClassList.usd)) {
                minValue.innerHTML = text5;
            }
        }
    }
}

// Выбор нужного тарифа

function priceFor1(currencyBtns, outputBlock, text1, text2, text3) {
    for (let i = 0; i < currencyBtns.length; i++) {
        
        if ((i == 0 || i == 3) && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text1;

        } else if (i == 1 && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text2;

        } else if ((i == 2 || i == 4) && currencyBtns[i].classList.contains('_active')) {
            outputBlock.textContent = text3;
        }
    }
}

// Функции для валидации форм пополнения/вывода

function setErrorFor(input, message) {
    const formControl = input.parentElement;
    const small = formControl.querySelector('small');

    formControl.classList.remove('success');
    formControl.classList.add('error');
    small.innerText = message;
}

function setSuccessFor(input) {
    const formControl = input.parentElement;

    formControl.classList.remove('error');
    formControl.classList.add('success');
}

// Проверка мин. суммы для пополнения/вывода

function checkAmount(curBtns, amount, value1, value2, value3, value4, value5, text1, text2, text3, text4, text5, text6) {
    for (let curBtn of curBtns) {

        if (amount.value == '') {
            setErrorFor(amount, text6);
            break;

        } else if (curBtn.classList.contains(btnsClassList.bitcoin) && curBtn.classList.contains('_active') && +amount.value < value1) {
            setErrorFor(amount, text1);
            break;

        } else if (curBtn.classList.contains(btnsClassList.ethereum) && curBtn.classList.contains('_active') && +amount.value < value2) {
            setErrorFor(amount, text2);
            break;

        } else if (curBtn.classList.contains(btnsClassList.litecoin) && curBtn.classList.contains('_active') && +amount.value < value3) {
            setErrorFor(amount, text3);
            break;

        } else if (curBtn.classList.contains(btnsClassList.dash) && curBtn.classList.contains('_active') && +amount.value < value4) {
            setErrorFor(amount, text4);
            break;

        } else if (curBtn.classList.contains(btnsClassList.usd) && curBtn.classList.contains('_active') && +amount.value < value5) {
            setErrorFor(amount, text5);
            break;

        } else {
            setSuccessFor(amount);
        }
    }
}

// Проверка на правильное заполнение полей. Если все правильно - перенаправляем на страницу

// function setLink(btn, inputs, hrefValue) {
//     btn.addEventListener('click', () => {
//         for (let i = 0; i < inputs.length; i++) {
//             if (inputs[i].classList.contains('success')) {
//                 btn.setAttribute('href', hrefValue);
//             } else {
//                 btn.setAttribute('href', '#');
//             }
//         }
//     });
// }

// Buttons and inputs

const investCurrencyBtns = document.querySelectorAll('.calc__step-currency'),
    investAmount = document.querySelector('#invest-amount'),
    periodMining = document.querySelector('#period-mining'),
    withdrawCurrencyBtns = document.querySelectorAll('.calc__step-currency2');

//  Output blocks

const miningPrice = document.querySelector('#mining-price'),
    hashrate = document.querySelector('#hashrate'),
    profit = document.querySelector('#profit'),
    dailyIncome = document.querySelector('#daily-income'),
    minAmount = document.querySelector('#min-amount'),
    minPeriodMining = document.querySelector('#min-period-mining');

let replenishRate, withdrawRate;

for (let replenishCur of investCurrencyBtns) {
    replenishCur.addEventListener('click', function () {
        chooseCurrency(replenishCur, investCurrencyBtns);
        checkLimits(replenishCur, investCurrencyBtns, minAmount, depositValuesText.bitcoin, depositValuesText.ethereum, depositValuesText.litecoin, depositValuesText.dash, depositValuesText.usd);
        calcMiningPrice();
        priceFor1(investCurrencyBtns, miningPrice, `${priceFor1MH.other} $`, `${priceFor1MH.ethereum} $`, `${priceFor1MH.litecoin} $`);
        calcProfit();
    })
}

for (let withdrawCur of withdrawCurrencyBtns) {
    withdrawCur.addEventListener('click', function () {
        chooseCurrency(withdrawCur, withdrawCurrencyBtns);
        calcProfit();
    })
}

if (investAmount) {
    investAmount.addEventListener('input', function () {
        calcMiningPrice();
        calcProfit();
    })
}

if (periodMining) {
    periodMining.addEventListener('input', function () {
        calcProfit();
    })
}

// Рассчёт хэшрейта в Mh/s

function calcMiningPrice() {
    let hashrateValue;
    let investAmountVal = +investAmount.value;

    for (let replCur of investCurrencyBtns) {
        if (replCur.classList.contains('_active') && investAmount.value != '') {
            let replRate = +replCur.dataset.currency;

            if (replCur.classList.contains(btnsClassList.bitcoin)) {
                hashrateValue = Math.round((replRate * investAmountVal) / priceFor1MH.other);
                hashrate.textContent = `${hashrateValue} MH/s`;
            }
            if (replCur.classList.contains(btnsClassList.ethereum)) {
                hashrateValue = Math.round((replRate * investAmountVal) / priceFor1MH.ethereum);
                hashrate.textContent = `${hashrateValue} MH/s`;
            }
            if (replCur.classList.contains(btnsClassList.litecoin)) {
                hashrateValue = Math.round((replRate * investAmountVal) / priceFor1MH.litecoin);
                hashrate.textContent = `${hashrateValue} MH/s`;
            }
            if (replCur.classList.contains(btnsClassList.dash)) {
                hashrateValue = Math.round((replRate * investAmountVal) / priceFor1MH.other);
                hashrate.textContent = `${hashrateValue} MH/s`;
            }
            if (replCur.classList.contains(btnsClassList.usd)) {
                hashrateValue = Math.round(investAmountVal / priceFor1MH.litecoin);
                hashrate.textContent = `${hashrateValue} MH/s`;
            }
        }
    }
}

// Рассчёт дохода

function calcProfit() {
    for (let replenishCur of investCurrencyBtns) {
        if (replenishCur.classList.contains('_active')) {
            for (let withdrawCur of withdrawCurrencyBtns) {
                if (withdrawCur.classList.contains('_active')) {

                    replenishRate = +replenishCur.dataset.currency;
                    withdrawRate = +withdrawCur.dataset.currency;

                    let resultCalc, resultIncome;
                    let investAmountVal = +investAmount.value,
                        periodMiningVal = +periodMining.value;

                    resultIncome = (investAmountVal * replenishRate / withdrawRate) * 0.004;
                    resultCalc = resultIncome * periodMiningVal;

                    if (withdrawCur.classList.contains(btnsClassList.bitcoin) || withdrawCur.classList.contains(btnsClassList.ethereum) || withdrawCur.classList.contains(btnsClassList.litecoin) || withdrawCur.classList.contains(btnsClassList.dash)) {
                        resultCalc = resultCalc.toFixed(6);
                        resultIncome = resultIncome.toFixed(6);
                    }
                    if (withdrawCur.classList.contains(btnsClassList.bitcoin)) {
                        profit.textContent = `${resultCalc} BTC`;
                        dailyIncome.textContent = `${resultIncome} BTC`;
                    }
                    if (withdrawCur.classList.contains(btnsClassList.ethereum)) {
                        profit.textContent = `${resultCalc} ETH`;
                        dailyIncome.textContent = `${resultIncome} ETH`;
                    }
                    if (withdrawCur.classList.contains(btnsClassList.litecoin)) {
                        profit.textContent = `${resultCalc} LTC`;
                        dailyIncome.textContent = `${resultIncome} LTC`;
                    }
                    if (withdrawCur.classList.contains(btnsClassList.dash)) {
                        profit.textContent = `${resultCalc} DASH`;
                        dailyIncome.textContent = `${resultIncome} DASH`;
                    }
                    if (withdrawCur.classList.contains(btnsClassList.usd)) {
                        resultCalc = resultCalc.toFixed(2);
                        resultIncome = resultIncome.toFixed(2);

                        profit.textContent = `${resultCalc} $`;
                        dailyIncome.textContent = `${resultIncome} $`;
                    }
                }
            }
        }
    }
}
    new WOW().init();
});